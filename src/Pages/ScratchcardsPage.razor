@page "/scratchcards"
@using ScratchcardStatistics.Models
@using ScratchcardStatistics.Services
@inject NavigationManager NavigationManager
@inject ScratchcardService ScratchcardService

<PageTitle>Kaparós sorsjegyek</PageTitle>

@if (_scratchcardsFiltered is not null)
{
    <FluentDataGrid Items="@_scratchcardsFiltered" OnRowFocus="HandleRowFocus" TGridItem="Scratchcard" ShowHover>
        <PropertyColumn Property="@(s => s.Name)" Title="Név" Sortable=true>
            <ColumnOptions>
                <FluentSearch Autofocus=true @bind-Value=_filterName @oninput="NameChanged" @bind-Value:after="NameCleared" Label="Szűrés" Placeholder="Név" />
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(s => s.ReleaseDate)" InitialSortDirection=SortDirection.Descending IsDefaultSortColumn=true Title="Megjelenés" Align=Align.Center Sortable=true  />
        <PropertyColumn Property="@(s => s.Price)" Format="C0" Title="Ár" Align=Align.End Sortable=true />
        <PropertyColumn Property="@(s => s.ExpectedValue)" Format="C0" Title="Várható érték" Align=Align.End Sortable=true />
        <PropertyColumn Property="@(s => s.ExpectedValuePercent)" Format="P0" Title="Várható érték %" Align=Align.Center Sortable=true />
        <TemplateColumn Title="Nyerési esély" Align=Align.Center Sortable=true SortBy="@chanceOfWinningToOneSort">1:@(context.ChanceOfWinningToOne.ToString("N2"))</TemplateColumn>
        <PropertyColumn Property="@(s => s.ChanceOfWinningPercent)" Format="P2" Title="Nyerési esély %" Align=Align.Center Sortable=true />
        <TemplateColumn Title="Elérhető" Align=Align.Center Sortable=true SortBy="@isAvailableSort">
            <ColumnOptions>
                <FluentCheckbox ThreeState=true CheckState=_filterIsAvailable CheckStateChanged=IsAvailableChanged Label="Elérhető" />
            </ColumnOptions>
            <ChildContent>
                @(context.IsAvailable ? "✅" : "❌")
            </ChildContent>
        </TemplateColumn>
    </FluentDataGrid>
}

@code {
    private string _filterName = string.Empty;
    private bool? _filterIsAvailable = true;

    private Scratchcard[]? _scratchcardsAll;
    private IQueryable<Scratchcard>? _scratchcardsFiltered;

    GridSort<Scratchcard> chanceOfWinningToOneSort = GridSort<Scratchcard>.ByAscending(x => x.ChanceOfWinningToOne);
    GridSort<Scratchcard> isAvailableSort = GridSort<Scratchcard>.ByAscending(x => x.IsAvailable);

    protected override async Task OnInitializedAsync()
    {
        _scratchcardsAll = await ScratchcardService.GetScratchcardsAsync();
        FilterChanged();
    }

    private void NameChanged(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _filterName = value;
            FilterChanged();
        }
    }

    private void NameCleared()
    {
        if (string.IsNullOrWhiteSpace(_filterName))
        {
            _filterName = string.Empty;
            FilterChanged();
        }
    }

    private void IsAvailableChanged(bool? isSelected)
    {
        _filterIsAvailable = isSelected;
        FilterChanged();
    }

    private void FilterChanged() =>
        _scratchcardsFiltered = _scratchcardsAll!
            .Where(s => s.Name.Contains(_filterName, StringComparison.OrdinalIgnoreCase))
            .Where(s => _filterIsAvailable.HasValue ? s.IsAvailable == _filterIsAvailable : true)
            .AsQueryable();

    private void HandleRowFocus(FluentDataGridRow<Scratchcard> row)
    {
        NavigationManager.NavigateTo($"scratchcards/{row.Item!.Name.Replace(' ', '_')}");
    }
}
